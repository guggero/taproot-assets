{
  "swagger": "2.0",
  "info": {
    "title": "assetwalletrpc/assetwallet.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "AssetWallet"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/taro/wallet/internal-key/next": {
      "post": {
        "summary": "NextInternalKey derives the next internal key for the given key family and\nstores it as an internal key in the database to make sure it is identified\nas a local key later on when importing proofs. While an internal key can\nalso be used as the internal key of a script key, it is recommended to use\nthe NextScriptKey RPC instead, to make sure the tweaked Taproot output key\nis also recognized as a local key.",
        "operationId": "AssetWallet_NextInternalKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/assetwalletrpcNextInternalKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/assetwalletrpcNextInternalKeyRequest"
            }
          }
        ],
        "tags": [
          "AssetWallet"
        ]
      }
    },
    "/v1/taro/wallet/script-key/next": {
      "post": {
        "summary": "NextScriptKey derives the next script key (and its corresponding internal\nkey) and stores them both in the database to make sure they are identified\nas local keys later on when importing proofs.",
        "operationId": "AssetWallet_NextScriptKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/assetwalletrpcNextScriptKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/assetwalletrpcNextScriptKeyRequest"
            }
          }
        ],
        "tags": [
          "AssetWallet"
        ]
      }
    },
    "/v1/taro/wallet/virtual-psbt/anchor": {
      "post": {
        "summary": "AnchorVirtualPsbts merges and then commits multiple virtual transactions in\na single BTC level anchor transaction.",
        "description": "TODO(guggero): Actually implement accepting and merging multiple\ntransactions.",
        "operationId": "AssetWallet_AnchorVirtualPsbts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tarorpcSendAssetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/assetwalletrpcAnchorVirtualPsbtsRequest"
            }
          }
        ],
        "tags": [
          "AssetWallet"
        ]
      }
    },
    "/v1/taro/wallet/virtual-psbt/fund": {
      "post": {
        "summary": "FundVirtualPsbt selects inputs from the available asset commitments to fund\na virtual transaction matching the template.",
        "operationId": "AssetWallet_FundVirtualPsbt",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/assetwalletrpcFundVirtualPsbtResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/assetwalletrpcFundVirtualPsbtRequest"
            }
          }
        ],
        "tags": [
          "AssetWallet"
        ]
      }
    },
    "/v1/taro/wallet/virtual-psbt/sign": {
      "post": {
        "summary": "SignVirtualPsbt signs the inputs of a virtual transaction and prepares the\ncommitments of the inputs and outputs.",
        "operationId": "AssetWallet_SignVirtualPsbt",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/assetwalletrpcSignVirtualPsbtResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/assetwalletrpcSignVirtualPsbtRequest"
            }
          }
        ],
        "tags": [
          "AssetWallet"
        ]
      }
    }
  },
  "definitions": {
    "assetwalletrpcAnchorVirtualPsbtsRequest": {
      "type": "object",
      "properties": {
        "virtual_psbts": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "The list of virtual transactions that should be merged and committed to in\nthe BTC level anchor transaction."
        }
      }
    },
    "assetwalletrpcFundVirtualPsbtRequest": {
      "type": "object",
      "properties": {
        "psbt": {
          "type": "string",
          "format": "byte",
          "description": "Use an existing PSBT packet as the template for the funded PSBT.\n\nTODO(guggero): Actually implement this. We can't use the \"reserved\"\nkeyword here because we're in a oneof, so we add the field but implement\nit later."
        },
        "raw": {
          "$ref": "#/definitions/assetwalletrpcTxTemplate",
          "description": "Use the asset outputs and optional asset inputs from this raw template."
        }
      }
    },
    "assetwalletrpcFundVirtualPsbtResponse": {
      "type": "object",
      "properties": {
        "funded_psbt": {
          "type": "string",
          "format": "byte",
          "description": "The funded but not yet signed PSBT packet."
        },
        "change_output_index": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the added change output or -1 if no change was left over."
        }
      }
    },
    "assetwalletrpcNextInternalKeyRequest": {
      "type": "object",
      "properties": {
        "key_family": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "assetwalletrpcNextInternalKeyResponse": {
      "type": "object",
      "properties": {
        "internal_key": {
          "$ref": "#/definitions/tarorpcKeyDescriptor"
        }
      }
    },
    "assetwalletrpcNextScriptKeyRequest": {
      "type": "object",
      "properties": {
        "key_family": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "assetwalletrpcNextScriptKeyResponse": {
      "type": "object",
      "properties": {
        "script_key": {
          "$ref": "#/definitions/tarorpcScriptKey"
        }
      }
    },
    "assetwalletrpcPrepareReAnchorResponse": {
      "type": "object",
      "properties": {
        "taro_tap_leaf": {
          "$ref": "#/definitions/tarorpcTapLeaf"
        }
      }
    },
    "assetwalletrpcPrevId": {
      "type": "object",
      "properties": {
        "outpoint": {
          "$ref": "#/definitions/tarorpcOutPoint",
          "description": "The bitcoin anchor output on chain that contains the input asset."
        },
        "id": {
          "type": "string",
          "format": "byte",
          "description": "The asset ID of the previous asset tree."
        },
        "script_key": {
          "type": "string",
          "format": "byte",
          "description": "The tweaked Taproot output key committing to the possible spending\nconditions of the asset."
        }
      }
    },
    "assetwalletrpcReAnchorResponse": {
      "type": "object"
    },
    "assetwalletrpcSignVirtualPsbtRequest": {
      "type": "object",
      "properties": {
        "funded_psbt": {
          "type": "string",
          "format": "byte",
          "description": "The PSBT of the virtual transaction that should be signed. The PSBT must\ncontain all required inputs, outputs, UTXO data and custom fields required\nto identify the signing key."
        }
      }
    },
    "assetwalletrpcSignVirtualPsbtResponse": {
      "type": "object",
      "properties": {
        "signed_psbt": {
          "type": "string",
          "format": "byte",
          "description": "The signed virtual transaction in PSBT format."
        },
        "signed_inputs": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "description": "The indices of signed inputs."
        }
      }
    },
    "assetwalletrpcTxTemplate": {
      "type": "object",
      "properties": {
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/assetwalletrpcPrevId"
          },
          "description": "An optional list of inputs to use. Every input must be an asset UTXO known\nto the wallet. The sum of all inputs must be greater than or equal to the\nsum of all outputs.\n\nIf no inputs are specified, asset coin selection will be performed instead\nand inputs of sufficient value will be added to the resulting PSBT."
        },
        "recipients": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "uint64"
          },
          "description": "A map of all Taro addresses mapped to the anchor transaction's output index\nthat should be sent to."
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "tarorpcAssetTransfer": {
      "type": "object",
      "properties": {
        "transfer_timestamp": {
          "type": "string",
          "format": "int64"
        },
        "anchor_tx_hash": {
          "type": "string",
          "format": "byte",
          "description": "The new transaction that commits to the set of Taro assets found at the\nabove new anchor point."
        },
        "anchor_tx_height_hint": {
          "type": "integer",
          "format": "int64"
        },
        "anchor_tx_chain_fees": {
          "type": "string",
          "format": "int64"
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tarorpcTransferInput"
          },
          "description": "Describes the set of spent assets."
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tarorpcTransferOutput"
          },
          "description": "Describes the set of newly created asset outputs."
        }
      }
    },
    "tarorpcKeyDescriptor": {
      "type": "object",
      "properties": {
        "raw_key_bytes": {
          "type": "string",
          "format": "byte",
          "description": "The raw bytes of the key being identified."
        },
        "key_loc": {
          "$ref": "#/definitions/tarorpcKeyLocator",
          "description": "The key locator that identifies which key to use for signing."
        }
      }
    },
    "tarorpcKeyLocator": {
      "type": "object",
      "properties": {
        "key_family": {
          "type": "integer",
          "format": "int32",
          "description": "The family of key being identified."
        },
        "key_index": {
          "type": "integer",
          "format": "int32",
          "description": "The precise index of the key being identified."
        }
      }
    },
    "tarorpcOutPoint": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "format": "byte",
          "description": "The hash of the transaction."
        },
        "index": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the output within the transaction."
        }
      }
    },
    "tarorpcScriptKey": {
      "type": "object",
      "properties": {
        "pub_key": {
          "type": "string",
          "format": "byte",
          "description": "The full Taproot output key the asset is locked to. This is either a BIP-86\nkey if the tap_tweak below is empty, or a key with the tap tweak applied to\nit."
        },
        "key_desc": {
          "$ref": "#/definitions/tarorpcKeyDescriptor",
          "description": "The key descriptor describing the internal key of the above Taproot key."
        },
        "tap_tweak": {
          "type": "string",
          "format": "byte",
          "description": "The optional Taproot tweak to apply to the above internal key. If this is\nempty then a BIP-86 style tweak is applied to the internal key."
        }
      }
    },
    "tarorpcSendAssetResponse": {
      "type": "object",
      "properties": {
        "transfer": {
          "$ref": "#/definitions/tarorpcAssetTransfer"
        }
      }
    },
    "tarorpcTapLeaf": {
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int64"
        },
        "script": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "tarorpcTransferInput": {
      "type": "object",
      "properties": {
        "anchor_point": {
          "type": "string",
          "description": "The old/current location of the Taro commitment that was spent as an\ninput."
        },
        "asset_id": {
          "type": "string",
          "format": "byte",
          "description": "The ID of the asset that was spent."
        },
        "script_key": {
          "type": "string",
          "format": "byte",
          "description": "The script key of the asset that was spent."
        },
        "amount": {
          "type": "string",
          "format": "uint64",
          "description": "The amount of the asset that was spent."
        }
      }
    },
    "tarorpcTransferOutput": {
      "type": "object",
      "properties": {
        "anchor": {
          "$ref": "#/definitions/tarorpcTransferOutputAnchor"
        },
        "script_key": {
          "type": "string",
          "format": "byte"
        },
        "script_key_is_local": {
          "type": "boolean"
        },
        "amount": {
          "type": "string",
          "format": "uint64"
        },
        "new_proof_blob": {
          "type": "string",
          "format": "byte"
        },
        "split_commit_root_hash": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "tarorpcTransferOutputAnchor": {
      "type": "object",
      "properties": {
        "outpoint": {
          "type": "string",
          "description": "The new location of the Taro commitment that was created on chain."
        },
        "value": {
          "type": "string",
          "format": "int64"
        },
        "internal_key": {
          "type": "string",
          "format": "byte"
        },
        "merkle_root": {
          "type": "string",
          "format": "byte"
        },
        "tapscript_sibling": {
          "type": "string",
          "format": "byte"
        },
        "num_passive_assets": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
  }
}
